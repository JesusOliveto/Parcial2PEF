PARCIAL 2 ‚Äì Simulaci√≥n de un Juego de Dados

üîπ Proyecto 7 ‚Äì Simulaci√≥n de un Juego de Dados  - Jesus Olariaga - Lopez
Crear un simulador de tiradas de dados para 1 a 4 jugadores.
Guardar estad√≠sticas: n√∫mero de tiradas, valores m√°s frecuentes, ganador.
Versi√≥n inicial con funciones repetidas y mala estructura ‚Üí refactorizar.
Usar batching para simular millones de tiradas en bloques.
Medir rendimiento con timeit y cProfile.
Usar line_profiler para ver qu√© partes del c√≥digo se ejecutan m√°s.
Implementar tests que verifiquen:
Que las tiradas est√©n siempre entre 1 y 6.
Que la suma de probabilidades se aproxime a la esperada.
---------------------------------------------------------------------------------------------
   Informe del Proyecto 7 ‚Äì Simulaci√≥n de un Juego de Dados

Autor: Jes√∫s Olariaga ‚Äì L√≥pez
Archivo: Informe_Proyecto7.txt

1) VERIFICACI√ìN DE CUMPLIMIENTO DE LA CONSIGNA
- Simulador para 1 a 4 jugadores: OK. Ambas versiones validan l√≠mites y soportan de 1 a 4 jugadores.
- Estad√≠sticas por jugador: OK. Se guarda n√∫mero de tiradas, frecuencias por cara (1..6), total de puntos y valor m√°s frecuente.
- Determinaci√≥n de ganador: OK. Se elige el jugador con mayor puntaje total.
- Versi√≥n inicial con funciones repetidas y mala estructura: OK. Presenta duplicaci√≥n, estado global y acoplamiento (ver secci√≥n 3).
- Refactorizaci√≥n completa: OK. Se reemplazan bucles y estado global por vectorizaci√≥n, clases de datos y funciones puras.
- Batching para millones de tiradas: OK. Se procesa en bloques configurables (batch_size) y se valida rendimiento a 1.000.000 de rondas.
- Medici√≥n de rendimiento: OK. Se incluyen timeit y cProfile en ambas versiones.
- line_profiler (kernprof): OK. Ambas versiones exponen funciones decoradas con @profile para inspecci√≥n.
- Tests estad√≠sticos: OK. Se verifica que todas las tiradas est√°n en [1..6] y que la suma de probabilidades ~ 1.0.

2) ¬øC√ìMO SE IMPLEMENT√ì CADA PUNTO?
2.1. Simulaci√≥n de 1 a 4 jugadores
- Sin refactor: funciones por jugador con l√≥gica duplicada (_simular_jugador1..4) y validaciones de l√≠mites.
- Refactor: una sola simulaci√≥n vectorizada con NumPy que genera todas las tiradas por lote y jugador en una matriz.

2.2. Estad√≠sticas y ganador
- Sin refactor: c√°lculo con Counter para frecuencias, total, valor m√°s frecuente y un mensaje por jugador; ganador por m√°ximo total.
- Refactor: se encapsula en dataclasses PlayerStats y GameStatistics; se calcula most_common_value por argmax y winner por m√°ximo de total_points.

2.3. Batching (millones de tiradas)
- Sin refactor: versi√≥n de batching ineficiente que re‚Äëejecuta la simulaci√≥n por bloques y concatena resultados.
- Refactor: procesamiento por lotes con tama√±o configurable (por defecto 100.000), acumulando totales y frecuencias de forma vectorizada.

2.4. Medici√≥n de rendimiento
- cProfile: funciones dedicadas que capturan y ordenan por tiempo acumulado.
- timeit: funciones/flags para repetir mediciones y obtener lista de duraciones.
- line_profiler: uso de @profile y ejecuci√≥n con ‚Äúkernprof -l -v‚Äù.

2.5. Tests de correcci√≥n estad√≠stica
- Rango de tiradas: se comprueba que las caras est√°n siempre entre 1 y 6.
- Probabilidades: se eval√∫a que la distribuci√≥n emp√≠rica por jugador suma ‚âà 1 (tolerancia razonable).

3) BAD SMELLS EN LA VERSI√ìN SIN REFACTORIZAR Y T√âCNICAS DE REFACTORIZACI√ìN
- C√≥digo duplicado: cuatro funciones casi id√©nticas para jugadores 1..4 ‚Üí ‚ÄúReplace Method with Parameter‚Äù + vectorizaci√≥n en simulate_dice_game.
- Estado global compartido (GLOBAL_RESULTS, GLOBAL_LOG, GLOBAL_CONFIG) y efectos laterales ‚Üí ‚ÄúEncapsulate Collection‚Äù, ‚ÄúReplace Global with Return Value / Objects‚Äù usando GameStatistics/PlayerStats.
- Latencia artificial (time.sleep(0.01)) en cada tirada ‚Üí eliminar latencia y reemplazar por generador vectorizado de enteros con NumPy.
-(puaj) Argumento mutable por defecto en guardar_en_cache ‚Üí correcci√≥n impl√≠cita al eliminar ese flujo en la versi√≥n refactorizada y evitar mutaciones compartidas.
- L√≥gica de presentaci√≥n mezclada con c√°lculo (mensajes y prints acoplados) ‚Üí separar dominio (estad√≠sticas y ganador) de la capa CLI (main).
- Manejo de excepciones gen√©ricas (try/except vac√≠o) que oculta errores ‚Üí validaciones expl√≠citas de par√°metros y eliminaci√≥n de capturas silenciosas.
- Pruebas en el mismo archivo que la implementaci√≥n ‚Üí mantener tests pero estructurar clases de prueba independientes y reutilizar API estable (simulate_dice_game, simulate_probabilities).
- Batching ineficiente que re‚Äëinvoca la simulaci√≥n completa y concatena ‚Üí batching real con acumulaci√≥n de totales y frecuencias por lote.
- Importaciones/constantes no usadas (math, Optional, TEXTO_FORMATO trivial) ‚Üí limpiar dependencias en la versi√≥n refactorizada.

T√©cnicas aplicadas (mapeo):
- Extract Function / Extract Factory Method ‚Üí _build_player_stats y PlayerStats.from_arrays
- Encapsulate Collection ‚Üí GameStatistics / PlayerStats con m√©todos claros
- Replace Loop with Vectorized Operation ‚Üí conteo de frecuencias y sumas con NumPy
- Introduce Parameter Validation ‚Üí _validate_inputs para l√≠mites de jugadores, rondas y batch
- Preserve Whole Object ‚Üí benchmark/profiling reutilizan la misma funci√≥n de simulaci√≥n
- Replace Data with Object ‚Üí distribuciones y resultados via objetos en lugar de dicts mixtos

4) RESULTADOS DE RENDIMIENTO (valores provistos + c√°lculos de mejora)
4.1. kernprof (line_profiler)
- Sin refactor (funci√≥n simular_juego_sin_refactor): 83.88180 s
- Refactor (simulate_dice_game): 0.19532 s
- Mejora ‚âà √ó429.46

4.2. cProfile
- Sin refactor: 41.805 s (dominado por time.sleep en _tirada_lenta).
- Refactor: 0.172 s
- Mejora ‚âà √ó243.05

4.3. timeit (promedios de 3 corridas)
- Sin refactor: 41.780 s  (corridas: 41.956, 41.755, 41.631)
- Refactor: 0.168 s  (corridas: 0.178, 0.166, 0.159)
- Mejora ‚âà √ó249.07

Observaci√≥n clave: en la versi√≥n sin refactor, el cuello de botella es la espera artificial de 10 ms por tirada, lo que explica que time.sleep concentre casi todo el tiempo de CPU. La versi√≥n refactorizada elimina esa latencia y utiliza vectorizaci√≥n, logrando mejoras de entre √ó243 y √ó429 seg√∫n herramienta.

5) COMANDOS √öTILES (usados/esperados)
- line_profiler:   py -m kernprof -l -v .\CodigoSinRefactorizar.py
                   py -m kernprof -l -v .\CodigoRefactorizado.py
- cProfile (flag): python .\CodigoSinRefactorizar.py --profile
                   python .\CodigoRefactorizado.py --profile
- timeit (flag):   python .\CodigoSinRefactorizar.py --timeit
                   python .\CodigoRefactorizado.py --timeit
- tests:           python .\CodigoSinRefactorizar.py --run-tests
                   python .\CodigoRefactorizado.py   --run-tests

6) CONCLUSI√ìN
La refactorizaci√≥n cumple la consigna y mejora dr√°sticamente el rendimiento gracias a: (a) eliminaci√≥n de latencia artificial; (b) generaci√≥n vectorizada de tiradas; (c) acumulaci√≥n por lotes; (d) encapsulaci√≥n del modelo de dominio en dataclasses y validaciones de par√°metros; (e) API estable que facilita testing y medici√≥n.
---------------------------------------------------------------------------------------------
   Resultados de profiling
---

CodigoSinRefactorizar: 

PS C:\Users\Gsu\Documents\Parcial2PEF> py -m  kernprof -l -v .\CodigoSinRefactorizar.py
Simulaci√≥n completa:
{'jugadores': [{'jugador': 'player_1', 'tiradas': 1000, 'frecuencias': {1: 163, 2: 182, 3: 155, 4: 147, 5: 186, 6: 167}, 'total': 3512, 'valor_mas_frecuente': 5, 'mensaje': 'Jugador player_1 obtuvo 3512 puntos'}, {'jugador': 'player_2', 'tiradas': 1000, 'frecuencias': {1: 176, 2: 154, 3: 166, 4: 164, 5: 163, 6: 177}, 'total': 3515, 'valor_mas_frecuente': 6, 'mensaje': 'Jugador player_2 obtuvo 3515 puntos'}, {'jugador': 'player_3', 'tiradas': 1000, 'frecuencias': {1: 174, 2: 144, 3: 189, 4: 147, 5: 193, 6: 153}, 'total': 3500, 'valor_mas_frecuente': 5, 'mensaje': 'Jugador player_3 obtuvo 3500 puntos'}, {'jugador': 'player_4', 'tiradas': 1000, 'frecuencias': {1: 158, 2: 164, 3: 175, 4: 174, 5: 170, 6: 159}, 'total': 3511, 'valor_mas_frecuente': 3, 'mensaje': 'Jugador player_4 obtuvo 3511 puntos'}], 'total_rondas': 1000, 'ganador': {'jugador': 'player_2', 'total': 3515}}
Simulaci√≥n en lotes (ineficiente):
{'jugadores': [{'jugador': 'player_1', 'tiradas': 1000, 'frecuencias': {1: 179, 2: 152, 3: 171, 4: 172, 5: 167, 6: 159}, 'total': 3473, 'valor_mas_frecuente': 1, 'mensaje': 'Jugador player_1 obtuvo 3473 puntos'}, {'jugador': 'player_2', 'tiradas': 1000, 'frecuencias': {1: 164, 2: 200, 3: 161, 4: 144, 5: 176, 6: 155}, 'total': 3433, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_2 obtuvo 3433 puntos'}, {'jugador': 'player_3', 'tiradas': 1000, 'frecuencias': {1: 162, 2: 182, 3: 175, 4: 173, 5: 146, 6: 162}, 'total': 3445, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_3 obtuvo 3445 puntos'}, {'jugador': 'player_4', 'tiradas': 1000, 'frecuencias': {1: 157, 2: 178, 3: 156, 4: 172, 5: 174, 6: 163}, 'total': 3517, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_4 obtuvo 3517 puntos'}], 'total_rondas': 1000, 'ganador': {'jugador': 'player_4', 'total': 3517}}
Wrote profile results to 'CodigoSinRefactorizar.py.lprof'
Timer unit: 1e-06 s

Total time: 83.8818 s
File: .\CodigoSinRefactorizar.py
Function: simular_juego_sin_refactor at line 147

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   147                                           @profile  # BAD SMELL: decorador aplicado directamente a funci√≥n larga.
   148                                           def simular_juego_sin_refactor(players: int, rondas: int) -> Dict[str, object]:
   149                                                  """Ejecuta la simulaci√≥n principal utilizando el c√≥digo sin refactorizar."""
   150         2          5.5      2.8      0.0         if players < 1 or players > 4:
   151                                                          raise ValueError("El n√∫mero de jugadores debe estar entre 1 y 4")
   152         2          3.2      1.6      0.0         if rondas <= 0:
   153                                                          raise ValueError("Las rondas deben ser mayores a cero")
   154
   155         2        592.9    296.4      0.0         _reiniciar_global(players)
   156
   157         2          3.1      1.6      0.0         if players >= 1:
   158         2   20958788.6 1.05e+07     25.0                 GLOBAL_RESULTS["player_1"] = _simular_jugador1(rondas)
   159         2          3.1      1.6      0.0         if players >= 2:
   160         2   20999126.4 1.05e+07     25.0                 GLOBAL_RESULTS["player_2"] = _simular_jugador2(rondas)
   161         2          2.6      1.3      0.0         if players >= 3:
   162         2   20953220.6 1.05e+07     25.0                 GLOBAL_RESULTS["player_3"] = _simular_jugador3(rondas)
   163         2          2.1      1.1      0.0         if players >= 4:
   164         2   20969402.4 1.05e+07     25.0                 GLOBAL_RESULTS["player_4"] = _simular_jugador4(rondas)
   165
   166         2          2.1      1.1      0.0         estadisticas = []
   167         2          1.8      0.9      0.0         if players >= 1:
   168         2        249.1    124.6      0.0                 estadisticas.append(_estadisticas_individuales("player_1", GLOBAL_RESULTS["player_1"]))
   169         2          1.5      0.8      0.0         if players >= 2:
   170         2        114.7     57.4      0.0                 estadisticas.append(_estadisticas_individuales("player_2", GLOBAL_RESULTS["player_2"]))
   171         2          1.1      0.6      0.0         if players >= 3:
   172         2        106.5     53.2      0.0                 estadisticas.append(_estadisticas_individuales("player_3", GLOBAL_RESULTS["player_3"]))
   173         2          1.2      0.6      0.0         if players >= 4:
   174         2        114.5     57.2      0.0                 estadisticas.append(_estadisticas_individuales("player_4", GLOBAL_RESULTS["player_4"]))
   175
   176         2          1.2      0.6      0.0         try:  # BAD SMELL: captura gen√©rica que oculta errores reales.
   177         2          9.0      4.5      0.0                 guardar_en_cache({"jugadores": estadisticas, "rondas": rondas})
   178                                                  except Exception:
   179                                                          pass
   180
   181         2         17.1      8.6      0.0         ganador = _determinar_ganador(estadisticas)
   182         2          1.5      0.8      0.0         resultado = {
   183         2          1.1      0.6      0.0                 "jugadores": estadisticas,
   184         2          1.1      0.6      0.0                 "total_rondas": rondas,
   185         2          1.0      0.5      0.0                 "ganador": ganador,
   186                                                  }
   187         2          1.9      1.0      0.0         GLOBAL_LOG.append(resultado)  # BAD SMELL: crecimiento infinito de logs en memoria.
   188         2          4.2      2.1      0.0         return resultado



PS C:\Users\Gsu\Documents\Parcial2PEF> python .\CodigoSinRefactorizar.py --profile
         37461 function calls (37447 primitive calls) in 41.805 seconds

   Ordered by: cumulative time
   List reduced from 36 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   41.805   41.805 C:\Users\Gsu\Documents\Parcial2PEF\CodigoSinRefactorizar.py:147(simular_juego_sin_refactor)
     4000    0.033    0.000   41.790    0.010 C:\Users\Gsu\Documents\Parcial2PEF\CodigoSinRefactorizar.py:58(_tirada_lenta)
     4000   41.701    0.010   41.701    0.010 {built-in method time.sleep}
        1    0.002    0.002   10.461   10.461 C:\Users\Gsu\Documents\Parcial2PEF\CodigoSinRefactorizar.py:77(_simular_jugador2)
        1    0.003    0.003   10.455   10.455 C:\Users\Gsu\Documents\Parcial2PEF\CodigoSinRefactorizar.py:85(_simular_jugador3)
        1    0.003    0.003   10.451   10.451 C:\Users\Gsu\Documents\Parcial2PEF\CodigoSinRefactorizar.py:93(_simular_jugador4)
        1    0.002    0.002   10.437   10.437 C:\Users\Gsu\Documents\Parcial2PEF\CodigoSinRefactorizar.py:69(_simular_jugador1)
     4000    0.024    0.000    0.056    0.000 C:\Python313\Lib\random.py:345(choice)
     4000    0.016    0.000    0.026    0.000 C:\Python313\Lib\random.py:245(_randbelow_with_getrandbits)
     8004    0.007    0.000    0.007    0.000 {built-in method builtins.len}



Simulaci√≥n completa:
{'jugadores': [{'jugador': 'player_1', 'tiradas': 1000, 'frecuencias': {1: 178, 2: 158, 3: 166, 4: 160, 5: 161, 6: 177}, 'total': 3499, 'valor_mas_frecuente': 1, 'mensaje': 'Jugador player_1 obtuvo 3499 puntos'}, {'jugador': 'player_2', 'tiradas': 1000, 'frecuencias': {1: 158, 2: 175, 3: 158, 4: 179, 5: 156, 6: 174}, 'total': 3522, 'valor_mas_frecuente': 4, 'mensaje': 'Jugador player_2 obtuvo 3522 puntos'}, {'jugador': 'player_3', 'tiradas': 1000, 'frecuencias': {1: 168, 2: 174, 3: 162, 4: 170, 5: 169, 6: 157}, 'total': 3469, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_3 obtuvo 3469 puntos'}, {'jugador': 'player_4', 'tiradas': 1000, 'frecuencias': {1: 155, 2: 182, 3: 168, 4: 172, 5: 169, 6: 154}, 'total': 3480, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_4 obtuvo 3480 puntos'}], 'total_rondas': 1000, 'ganador': {'jugador': 'player_2', 'total': 3522}}
Simulaci√≥n en lotes (ineficiente):
{'jugadores': [{'jugador': 'player_1', 'tiradas': 1000, 'frecuencias': {1: 176, 2: 158, 3: 162, 4: 171, 5: 155, 6: 178}, 'total': 3505, 'valor_mas_frecuente': 6, 'mensaje': 'Jugador player_1 obtuvo 3505 puntos'}, {'jugador': 'player_2', 'tiradas': 1000, 'frecuencias': {1: 176, 2: 152, 3: 161, 4: 160, 5: 160, 6: 191}, 'total': 3549, 'valor_mas_frecuente': 6, 'mensaje': 'Jugador player_2 obtuvo 3549 puntos'}, {'jugador': 'player_3', 'tiradas': 1000, 'frecuencias': {1: 161, 2: 186, 3: 160, 4: 168, 5: 180, 6: 145}, 'total': 3455, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_3 obtuvo 3455 puntos'}, {'jugador': 'player_4', 'tiradas': 1000, 'frecuencias': {1: 158, 2: 170, 3: 175, 4: 134, 5: 178, 6: 185}, 'total': 3559, 'valor_mas_frecuente': 6, 'mensaje': 'Jugador player_4 obtuvo 3559 puntos'}], 'total_rondas': 1000, 'ganador': {'jugador': 'player_4', 'total': 3559}}



PS C:\Users\Gsu\Documents\Parcial2PEF> python .\CodigoSinRefactorizar.py --timeit
Resultados timeit: [41.95559819997288, 41.75493540009484, 41.63091380009428]
Simulaci√≥n completa:
{'jugadores': [{'jugador': 'player_1', 'tiradas': 1000, 'frecuencias': {1: 157, 2: 172, 3: 157, 4: 189, 5: 172, 6: 153}, 'total': 3506, 'valor_mas_frecuente': 4, 'mensaje': 'Jugador player_1 obtuvo 3506 puntos'}, {'jugador': 'player_2', 'tiradas': 1000, 'frecuencias': {1: 190, 2: 164, 3: 155, 4: 164, 5: 165, 6: 162}, 'total': 3436, 'valor_mas_frecuente': 1, 'mensaje': 'Jugador player_2 obtuvo 3436 puntos'}, {'jugador': 'player_3', 'tiradas': 1000, 'frecuencias': {1: 151, 2: 155, 3: 176, 4: 203, 5: 152, 6: 163}, 'total': 3539, 'valor_mas_frecuente': 4, 'mensaje': 'Jugador player_3 obtuvo 3539 puntos'}, {'jugador': 'player_4', 'tiradas': 1000, 'frecuencias': {1: 176, 2: 173, 3: 155, 4: 176, 5: 171, 6: 149}, 'total': 3440, 'valor_mas_frecuente': 4, 'mensaje': 'Jugador player_4 obtuvo 3440 puntos'}], 'total_rondas': 1000, 'ganador': {'jugador': 'player_3', 'total': 3539}}
Simulaci√≥n en lotes (ineficiente):
{'jugadores': [{'jugador': 'player_1', 'tiradas': 1000, 'frecuencias': {1: 167, 2: 171, 3: 169, 4: 186, 5: 155, 6: 152}, 'total': 3447, 'valor_mas_frecuente': 4, 'mensaje': 'Jugador player_1 obtuvo 3447 puntos'}, {'jugador': 'player_2', 'tiradas': 1000, 'frecuencias': {1: 174, 2: 162, 3: 176, 4: 167, 5: 167, 6: 154}, 'total': 3453, 'valor_mas_frecuente': 3, 'mensaje': 'Jugador player_2 obtuvo 3453 puntos'}, {'jugador': 'player_3', 'tiradas': 1000, 'frecuencias': {1: 152, 2: 158, 3: 196, 4: 166, 5: 170, 6: 158}, 'total': 3518, 'valor_mas_frecuente': 3, 'mensaje': 'Jugador player_3 obtuvo 3518 puntos'}, {'jugador': 'player_4', 'tiradas': 1000, 'frecuencias': {1: 165, 2: 180, 3: 160, 4: 163, 5: 171, 6: 161}, 'total': 3478, 'valor_mas_frecuente': 2, 'mensaje': 'Jugador player_4 obtuvo 3478 puntos'}], 'total_rondas': 1000, 'ganador': {'jugador': 'player_3', 'total': 3518}}
-------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
   CodigoRefactorizado:
---------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------

   PS C:\Users\Gsu\Documents\Parcial2PEF> py -m  kernprof -l -v .\CodigoRefactorizado.py
{'total_rounds': 1000000, 'players': [{'player_id': 1, 'total_points': 3501932, 'frequencies': {1: 166617, 2: 166379, 3: 166771, 4: 165988, 5: 167178, 6: 167067}, 'most_common_value': 5}, {'player_id': 2, 'total_points': 3501552, 'frequencies': {1: 166346, 2: 166485, 3: 167211, 4: 166321, 5: 166503, 6: 167134}, 'most_common_value': 3}, {'player_id': 3, 'total_points': 3497923, 'frequencies': {1: 166959, 2: 167017, 3: 166373, 4: 166580, 5: 166935, 6: 166136}, 'most_common_value': 2}, {'player_id': 4, 'total_points': 3495899, 'frequencies': {1: 166830, 2: 167472, 3: 167010, 4: 166498, 5: 166037, 6: 166153}, 'most_common_value': 2}], 'winner': {'player_id': 1, 'total_points': 3501932}}
Wrote profile results to 'CodigoRefactorizado.py.lprof'
Timer unit: 1e-06 s

Total time: 0.19532 s
File: .\CodigoRefactorizado.py
Function: simulate_dice_game at line 117

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   117                                           @profile
   118                                           def simulate_dice_game(
   119                                                  num_players: int,
   120                                                  num_rounds: int,
   121                                                  *,
   122                                                  batch_size: int = 100_000,
   123                                                  seed: int | None = None,
   124                                           ) -> GameStatistics:
   125                                                  """Simula un juego de dados vectorizado usando lotes.
   126
   127                                                  Refactorizaci√≥n: Introduce Batch Processing + Vectorization.
   128
   129                                                  Args:
   130                                                          num_players: N√∫mero de jugadores a simular.
   131                                                          num_rounds: Cantidad de rondas que ejecutar√° cada jugador.
   132                                                          batch_size: Tama√±o m√°ximo del bloque procesado en cada iteraci√≥n.
   133                                                          seed: Semilla opcional para reproducibilidad.
   134
   135                                                  Returns:
   136                                                          Instancia `GameStatistics` con los resultados consolidados.
   137                                                  """
   138
   139         1         15.2     15.2      0.0         _validate_inputs(num_players, num_rounds, batch_size)
   140
   141         1      31705.4  31705.4     16.2         rng = np.random.default_rng(seed)
   142         1          2.9      2.9      0.0         totals = np.zeros(num_players, dtype=np.int64)
   143         1          5.9      5.9      0.0         frequencies = np.zeros((num_players, 6), dtype=np.int64)
   144
   145         1          0.7      0.7      0.0         rounds_remaining = num_rounds
   146        11         54.3      4.9      0.0         while rounds_remaining > 0:
   147        10         61.2      6.1      0.0                 current_batch = min(batch_size, rounds_remaining)
   148        10      17826.0   1782.6      9.1                 rolls = rng.integers(1, 7, size=(current_batch, num_players), endpoint=False)
   149        10      13059.6   1306.0      6.7                 totals += rolls.sum(axis=0)
   150        10     132085.4  13208.5     67.6                 batch_frequencies = (rolls[..., None] == FACES).sum(axis=0)
   151        10        185.9     18.6      0.1                 frequencies += batch_frequencies  # Refactorizaci√≥n: Replace Loop with Vectorized Operation.        
   152        10         37.6      3.8      0.0                 rounds_remaining -= current_batch
   153
   154         1        251.9    251.9      0.1         player_stats = _build_player_stats(totals, frequencies)
   155
   156         1         15.4     15.4      0.0         winner = max(player_stats, key=lambda p: p.total_points)
   157         1         12.2     12.2      0.0         return GameStatistics(total_rounds=num_rounds, players=player_stats, winner=winner)


PS C:\Users\Gsu\Documents\Parcial2PEF> python CodigoRefactorizado.py --profile         
         6507 function calls (6335 primitive calls) in 0.172 seconds

   Ordered by: cumulative time
   List reduced from 309 to 15 due to restriction <15>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.100    0.100    0.172    0.172 C:\Users\Gsu\Documents\Parcial2PEF\CodigoRefactorizado.py:117(simulate_dice_game)
       30    0.044    0.001    0.044    0.001 {method 'reduce' of 'numpy.ufunc' objects}
       20    0.000    0.000    0.044    0.002 {method 'sum' of 'numpy.ndarray' objects}
       20    0.000    0.000    0.044    0.002 C:\Users\Gsu\AppData\Roaming\Python\Python313\site-packages\numpy\_core\_methods.py:49(_sum)
        1    0.000    0.000    0.028    0.028 C:\Users\Gsu\AppData\Roaming\Python\Python313\site-packages\numpy\__init__.py:720(__getattr__)
     23/1    0.000    0.000    0.028    0.028 <frozen importlib._bootstrap>:1349(_find_and_load)
     23/1    0.000    0.000    0.028    0.028 <frozen importlib._bootstrap>:1304(_find_and_load_unlocked)
     23/1    0.000    0.000    0.027    0.027 <frozen importlib._bootstrap>:911(_load_unlocked)
      9/1    0.000    0.000    0.027    0.027 <frozen importlib._bootstrap_external>:1020(exec_module)
     59/2    0.000    0.000    0.026    0.013 <frozen importlib._bootstrap>:480(_call_with_frames_removed)
      9/1    0.000    0.000    0.026    0.026 {built-in method builtins.exec}
        1    0.000    0.000    0.026    0.026 C:\Users\Gsu\AppData\Roaming\Python\Python313\site-packages\numpy\random\__init__.py:1(<module>)
      2/1    0.000    0.000    0.026    0.026 <frozen importlib._bootstrap>:1390(_handle_fromlist)
        2    0.000    0.000    0.026    0.013 {built-in method builtins.__import__}
     10/5    0.000    0.000    0.021    0.004 <frozen importlib._bootstrap_external>:1326(exec_module)



{'total_rounds': 1000000, 'players': [{'player_id': 1, 'total_points': 3499718, 'frequencies': {1: 166886, 2: 166480, 3: 166698, 4: 166968, 5: 165902, 6: 167066}, 'most_common_value': 6}, {'player_id': 2, 'total_points': 3502025, 'frequencies': {1: 167250, 2: 166201, 3: 166274, 4: 165787, 5: 166525, 6: 167963}, 'most_common_value': 6}, {'player_id': 3, 'total_points': 3501521, 'frequencies': {1: 166256, 2: 166478, 3: 167086, 4: 166837, 5: 166355, 6: 166988}, 'most_common_value': 3}, {'player_id': 4, 'total_points': 3501293, 'frequencies': {1: 166210, 2: 166551, 3: 166599, 4: 167354, 5: 166948, 6: 166338}, 'most_common_value': 4}], 'winner': {'player_id': 2, 'total_points': 3502025}}








PS C:\Users\Gsu\Documents\Parcial2PEF> python CodigoRefactorizado.py --timeit        
[0.17821649997495115, 0.16603670013137162, 0.1589919999241829]
{'total_rounds': 1000000, 'players': [{'player_id': 1, 'total_points': 3498211, 'frequencies': {1: 166670, 2: 166861, 3: 167247, 4: 166328, 5: 166598, 6: 166296}, 'most_common_value': 3}, {'player_id': 2, 'total_points': 3495735, 'frequencies': {1: 167560, 2: 166930, 3: 166496, 4: 166204, 5: 166849, 6: 165961}, 'most_common_value': 1}, {'player_id': 3, 'total_points': 3500769, 'frequencies': {1: 166736, 2: 165966, 3: 167023, 4: 166806, 5: 167006, 6: 166463}, 'most_common_value': 3}, {'player_id': 4, 'total_points': 3499602, 'frequencies': {1: 166704, 2: 166929, 3: 166492, 4: 166530, 5: 166626, 6: 166719}, 'most_common_value': 2}], 'winner': {'player_id': 3, 'total_points': 3500769}}









----------------------------------------------------------------------------------------------------------

   Mejoras observadas (detalle):
    - **Rendimiento:** la simulaci√≥n pas√≥ de ~84 s para 1 000 rondas a ~0.2 s para 1 000 000 de rondas, lo que supone un throughput >400 000√ó m√°s alto por tirada.
    - **Cuellos de botella eliminados:** se retir√≥ el `time.sleep(0.01)` y la duplicaci√≥n `_simular_jugadorX`, sustituy√©ndolos por un √∫nico flujo vectorizado.
    - **Procesamiento por lotes real:** se consolidan las tiradas en arreglos NumPy y se cuentan frecuencias sin reconstruir listas intermedias.
    - **Gesti√≥n de estado:** desaparici√≥n de `GLOBAL_RESULTS` y `GLOBAL_LOG`; los datos se encapsulan en dataclasses inmutables.
    - **Calidad del c√≥digo:** funciones con responsabilidad √∫nica, validaciones expl√≠citas y pruebas unitarias m√°s r√°pidas (~0.04 s vs ~11.6 s).
    - **Escalabilidad:** el coste crece de forma lineal con el n√∫mero de rondas y cabe aumentar jugadores/rondas sin penalizaciones abruptas.
